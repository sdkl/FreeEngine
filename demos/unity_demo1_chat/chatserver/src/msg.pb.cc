// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FreeEngineMsg {

namespace {

const ::google::protobuf::Descriptor* FEMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FEMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FEMsg_MSG_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FEMsg_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FEMsg_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* FEMsg_Talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FEMsg_Talk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  FEMsg_descriptor_ = file->message_type(0);
  static const int FEMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg, gameinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg, talk_),
  };
  FEMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FEMsg_descriptor_,
      FEMsg::default_instance_,
      FEMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FEMsg));
  FEMsg_MSG_Type_descriptor_ = FEMsg_descriptor_->enum_type(0);
  FEMsg_Info_descriptor_ = file->message_type(1);
  static const int FEMsg_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Info, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Info, newversionurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Info, protoversion_),
  };
  FEMsg_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FEMsg_Info_descriptor_,
      FEMsg_Info::default_instance_,
      FEMsg_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FEMsg_Info));
  FEMsg_Talk_descriptor_ = file->message_type(2);
  static const int FEMsg_Talk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Talk, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Talk, content_),
  };
  FEMsg_Talk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FEMsg_Talk_descriptor_,
      FEMsg_Talk::default_instance_,
      FEMsg_Talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Talk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEMsg_Talk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FEMsg_Talk));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FEMsg_descriptor_, &FEMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FEMsg_Info_descriptor_, &FEMsg_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FEMsg_Talk_descriptor_, &FEMsg_Talk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete FEMsg::default_instance_;
  delete FEMsg_reflection_;
  delete FEMsg_Info::default_instance_;
  delete FEMsg_Info_reflection_;
  delete FEMsg_Talk::default_instance_;
  delete FEMsg_Talk_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\rFreeEngineMsg\"\255\001\n\005FEMsg\022.\n\007"
    "msgtype\030\001 \002(\0162\035.FreeEngineMsg.FEMsg.MSG_"
    "Type\022+\n\010gameInfo\030\002 \001(\0132\031.FreeEngineMsg.F"
    "EMsg_Info\022\'\n\004talk\030\003 \001(\0132\031.FreeEngineMsg."
    "FEMsg_Talk\"\036\n\010MSG_Type\022\010\n\004Info\020\001\022\010\n\004Talk"
    "\020\002\"J\n\nFEMsg_Info\022\017\n\007version\030\001 \001(\t\022\025\n\rnew"
    "VersionURL\030\002 \001(\t\022\024\n\014protoVersion\030\003 \001(\t\"-"
    "\n\nFEMsg_Talk\022\016\n\006sender\030\001 \001(\t\022\017\n\007content\030"
    "\002 \001(\t", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  FEMsg::default_instance_ = new FEMsg();
  FEMsg_Info::default_instance_ = new FEMsg_Info();
  FEMsg_Talk::default_instance_ = new FEMsg_Talk();
  FEMsg::default_instance_->InitAsDefaultInstance();
  FEMsg_Info::default_instance_->InitAsDefaultInstance();
  FEMsg_Talk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FEMsg_MSG_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FEMsg_MSG_Type_descriptor_;
}
bool FEMsg_MSG_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FEMsg_MSG_Type FEMsg::Info;
const FEMsg_MSG_Type FEMsg::Talk;
const FEMsg_MSG_Type FEMsg::MSG_Type_MIN;
const FEMsg_MSG_Type FEMsg::MSG_Type_MAX;
const int FEMsg::MSG_Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FEMsg::kMsgtypeFieldNumber;
const int FEMsg::kGameInfoFieldNumber;
const int FEMsg::kTalkFieldNumber;
#endif  // !_MSC_VER

FEMsg::FEMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FEMsg::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::FreeEngineMsg::FEMsg_Info*>(&::FreeEngineMsg::FEMsg_Info::default_instance());
  talk_ = const_cast< ::FreeEngineMsg::FEMsg_Talk*>(&::FreeEngineMsg::FEMsg_Talk::default_instance());
}

FEMsg::FEMsg(const FEMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FEMsg::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1;
  gameinfo_ = NULL;
  talk_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FEMsg::~FEMsg() {
  SharedDtor();
}

void FEMsg::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
    delete talk_;
  }
}

void FEMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FEMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FEMsg_descriptor_;
}

const FEMsg& FEMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

FEMsg* FEMsg::default_instance_ = NULL;

FEMsg* FEMsg::New() const {
  return new FEMsg;
}

void FEMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 1;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::FreeEngineMsg::FEMsg_Info::Clear();
    }
    if (has_talk()) {
      if (talk_ != NULL) talk_->::FreeEngineMsg::FEMsg_Talk::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FEMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FreeEngineMsg.FEMsg.MSG_Type msgtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FreeEngineMsg::FEMsg_MSG_Type_IsValid(value)) {
            set_msgtype(static_cast< ::FreeEngineMsg::FEMsg_MSG_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameInfo;
        break;
      }

      // optional .FreeEngineMsg.FEMsg_Info gameInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_talk;
        break;
      }

      // optional .FreeEngineMsg.FEMsg_Talk talk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FEMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FreeEngineMsg.FEMsg.MSG_Type msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .FreeEngineMsg.FEMsg_Info gameInfo = 2;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gameinfo(), output);
  }

  // optional .FreeEngineMsg.FEMsg_Talk talk = 3;
  if (has_talk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->talk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FEMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FreeEngineMsg.FEMsg.MSG_Type msgtype = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .FreeEngineMsg.FEMsg_Info gameInfo = 2;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gameinfo(), target);
  }

  // optional .FreeEngineMsg.FEMsg_Talk talk = 3;
  if (has_talk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->talk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FEMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FreeEngineMsg.FEMsg.MSG_Type msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .FreeEngineMsg.FEMsg_Info gameInfo = 2;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }

    // optional .FreeEngineMsg.FEMsg_Talk talk = 3;
    if (has_talk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FEMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FEMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FEMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FEMsg::MergeFrom(const FEMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::FreeEngineMsg::FEMsg_Info::MergeFrom(from.gameinfo());
    }
    if (from.has_talk()) {
      mutable_talk()->::FreeEngineMsg::FEMsg_Talk::MergeFrom(from.talk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FEMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FEMsg::CopyFrom(const FEMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FEMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FEMsg::Swap(FEMsg* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(talk_, other->talk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FEMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FEMsg_descriptor_;
  metadata.reflection = FEMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FEMsg_Info::kVersionFieldNumber;
const int FEMsg_Info::kNewVersionURLFieldNumber;
const int FEMsg_Info::kProtoVersionFieldNumber;
#endif  // !_MSC_VER

FEMsg_Info::FEMsg_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FEMsg_Info::InitAsDefaultInstance() {
}

FEMsg_Info::FEMsg_Info(const FEMsg_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FEMsg_Info::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newversionurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protoversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FEMsg_Info::~FEMsg_Info() {
  SharedDtor();
}

void FEMsg_Info::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (newversionurl_ != &::google::protobuf::internal::kEmptyString) {
    delete newversionurl_;
  }
  if (protoversion_ != &::google::protobuf::internal::kEmptyString) {
    delete protoversion_;
  }
  if (this != default_instance_) {
  }
}

void FEMsg_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FEMsg_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FEMsg_Info_descriptor_;
}

const FEMsg_Info& FEMsg_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

FEMsg_Info* FEMsg_Info::default_instance_ = NULL;

FEMsg_Info* FEMsg_Info::New() const {
  return new FEMsg_Info;
}

void FEMsg_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_newversionurl()) {
      if (newversionurl_ != &::google::protobuf::internal::kEmptyString) {
        newversionurl_->clear();
      }
    }
    if (has_protoversion()) {
      if (protoversion_ != &::google::protobuf::internal::kEmptyString) {
        protoversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FEMsg_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newVersionURL;
        break;
      }

      // optional string newVersionURL = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newVersionURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newversionurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newversionurl().data(), this->newversionurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protoVersion;
        break;
      }

      // optional string protoVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protoVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protoversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protoversion().data(), this->protoversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FEMsg_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // optional string newVersionURL = 2;
  if (has_newversionurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newversionurl().data(), this->newversionurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newversionurl(), output);
  }

  // optional string protoVersion = 3;
  if (has_protoversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protoversion().data(), this->protoversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->protoversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FEMsg_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string newVersionURL = 2;
  if (has_newversionurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newversionurl().data(), this->newversionurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newversionurl(), target);
  }

  // optional string protoVersion = 3;
  if (has_protoversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protoversion().data(), this->protoversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protoversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FEMsg_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string newVersionURL = 2;
    if (has_newversionurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newversionurl());
    }

    // optional string protoVersion = 3;
    if (has_protoversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protoversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FEMsg_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FEMsg_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FEMsg_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FEMsg_Info::MergeFrom(const FEMsg_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_newversionurl()) {
      set_newversionurl(from.newversionurl());
    }
    if (from.has_protoversion()) {
      set_protoversion(from.protoversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FEMsg_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FEMsg_Info::CopyFrom(const FEMsg_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FEMsg_Info::IsInitialized() const {

  return true;
}

void FEMsg_Info::Swap(FEMsg_Info* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(newversionurl_, other->newversionurl_);
    std::swap(protoversion_, other->protoversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FEMsg_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FEMsg_Info_descriptor_;
  metadata.reflection = FEMsg_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FEMsg_Talk::kSenderFieldNumber;
const int FEMsg_Talk::kContentFieldNumber;
#endif  // !_MSC_VER

FEMsg_Talk::FEMsg_Talk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FEMsg_Talk::InitAsDefaultInstance() {
}

FEMsg_Talk::FEMsg_Talk(const FEMsg_Talk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FEMsg_Talk::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FEMsg_Talk::~FEMsg_Talk() {
  SharedDtor();
}

void FEMsg_Talk::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void FEMsg_Talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FEMsg_Talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FEMsg_Talk_descriptor_;
}

const FEMsg_Talk& FEMsg_Talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

FEMsg_Talk* FEMsg_Talk::default_instance_ = NULL;

FEMsg_Talk* FEMsg_Talk::New() const {
  return new FEMsg_Talk;
}

void FEMsg_Talk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FEMsg_Talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FEMsg_Talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FEMsg_Talk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FEMsg_Talk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FEMsg_Talk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FEMsg_Talk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FEMsg_Talk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FEMsg_Talk::MergeFrom(const FEMsg_Talk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FEMsg_Talk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FEMsg_Talk::CopyFrom(const FEMsg_Talk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FEMsg_Talk::IsInitialized() const {

  return true;
}

void FEMsg_Talk::Swap(FEMsg_Talk* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FEMsg_Talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FEMsg_Talk_descriptor_;
  metadata.reflection = FEMsg_Talk_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FreeEngineMsg

// @@protoc_insertion_point(global_scope)
